apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "secretly.fullname" . }}
  namespace: {{ .Values.namespace | default "secretly" }}
  labels:
    {{- include "secretly.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "secretly.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "secretly.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "secretly.serviceAccountName" . }}
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
        {{- with .Values.podSecurityContext }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001
            seccompProfile:
              type: RuntimeDefault
            {{- with .Values.securityContext }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.config.port }}
              protocol: TCP
          {{- if .Values.healthcheck.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ .Values.healthcheck.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthcheck.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.healthcheck.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.healthcheck.liveness.failureThreshold }}
            successThreshold: {{ .Values.healthcheck.liveness.successThreshold }}
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ .Values.healthcheck.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthcheck.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.healthcheck.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.healthcheck.readiness.failureThreshold }}
            successThreshold: {{ .Values.healthcheck.readiness.successThreshold }}
          {{- end }}
          env:
            # Slack Configuration (from file-mounted secrets)
            - name: SLACK_BOT_TOKEN_FILE
              value: "/etc/secrets/slack/bot-token"
            - name: SLACK_APP_TOKEN_FILE
              value: "/etc/secrets/slack/app-token"
            - name: SLACK_SIGNING_SECRET_FILE
              value: "/etc/secrets/slack/signing-secret"
            
            # Security Configuration (from file-mounted secrets)
            - name: ENCRYPTION_KEY_FILE
              value: "/etc/secrets/security/encryption-key"
            
            # Database Configuration
            {{- if or .Values.postgresql.enabled (not .Values.externalDatabase.enabled) }}
            - name: DATABASE_URL
              value: "postgresql://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ include "secretly.fullname" . }}-postgresql:5432/{{ .Values.postgresql.auth.database }}"
            {{- else }}
            - name: DATABASE_URL
              {{- if .Values.externalDatabase.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalDatabase.existingSecret }}
                  key: database-url
              {{- else }}
              value: "postgresql://{{ .Values.externalDatabase.username }}:{{ .Values.externalDatabase.password }}@{{ .Values.externalDatabase.host }}:{{ .Values.externalDatabase.port }}/{{ .Values.externalDatabase.database }}?sslmode={{ .Values.externalDatabase.sslMode }}"
              {{- end }}
            {{- end }}
            
            # Redis Configuration
            {{- if or .Values.redis.enabled (not .Values.externalRedis.enabled) }}
            - name: REDIS_URL
              value: "redis://:{{ .Values.redis.auth.password }}@{{ include "secretly.fullname" . }}-redis-master:6379"
            {{- else }}
            - name: REDIS_URL
              {{- if .Values.externalRedis.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalRedis.existingSecret }}
                  key: redis-url
              {{- else }}
              value: "redis://:{{ .Values.externalRedis.password }}@{{ .Values.externalRedis.host }}:{{ .Values.externalRedis.port }}"
              {{- end }}
            {{- end }}
            
            # Application Configuration
            - name: NODE_ENV
              value: {{ .Values.config.nodeEnv | quote }}
            - name: PORT
              value: {{ .Values.config.port | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.config.logLevel | quote }}
            
            # Feature Flags
            - name: ENABLE_CREDIT_CARD_DETECTION
              value: {{ .Values.config.features.creditCardDetection | quote }}
            - name: ENABLE_SSN_DETECTION
              value: {{ .Values.config.features.ssnDetection | quote }}
            - name: ENABLE_API_KEY_DETECTION
              value: {{ .Values.config.features.apiKeyDetection | quote }}
            - name: ENABLE_PASSWORD_DETECTION
              value: {{ .Values.config.features.passwordDetection | quote }}
            - name: ENABLE_PII_DETECTION
              value: {{ .Values.config.features.piiDetection | quote }}
            
            # Rate Limiting
            - name: RATE_LIMIT_PER_USER
              value: {{ .Values.config.rateLimits.perUser | quote }}
            - name: RATE_LIMIT_PER_CHANNEL
              value: {{ .Values.config.rateLimits.perChannel | quote }}
            - name: RATE_LIMIT_GLOBAL
              value: {{ .Values.config.rateLimits.global | quote }}
            
            # Data Retention
            - name: OBFUSCATION_RECORD_TTL
              value: {{ .Values.config.retention.obfuscationRecordTTL | quote }}
            - name: AUDIT_LOG_TTL
              value: {{ .Values.config.retention.auditLogTTL | quote }}
            
            {{- with .Values.extraEnvVars }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if or .Values.extraEnvVarsConfigMap .Values.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.extraEnvVarsConfigMap }}
            - configMapRef:
                name: {{ .Values.extraEnvVarsConfigMap }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.extraEnvVarsSecret }}
            {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: logs
              mountPath: /app/logs
            - name: slack-secrets
              mountPath: /etc/secrets/slack
              readOnly: true
            - name: security-secrets
              mountPath: /etc/secrets/security
              readOnly: true
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.lifecycle }}
          lifecycle:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- with .Values.sidecars }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: logs
          emptyDir: {}
        - name: slack-secrets
          secret:
            secretName: {{ include "secretly.fullname" . }}
            items:
              - key: slack-bot-token
                path: bot-token
              - key: slack-app-token
                path: app-token
              - key: slack-signing-secret
                path: signing-secret
        - name: security-secrets
          secret:
            secretName: {{ include "secretly.fullname" . }}
            items:
              - key: encryption-key
                path: encryption-key
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}