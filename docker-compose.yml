version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: secretly-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: secretly
      POSTGRES_USER: secretly_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secretly_dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U secretly_user -d secretly"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - secretly-network

  redis:
    image: redis:7-alpine
    container_name: secretly-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secretly_dev_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - secretly-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: secretly-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Slack Configuration
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      SLACK_APP_TOKEN: ${SLACK_APP_TOKEN}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}
      
      # Database Configuration
      DATABASE_URL: postgresql://secretly_user:${POSTGRES_PASSWORD:-secretly_dev_password}@postgres:5432/secretly
      REDIS_URL: redis://:${REDIS_PASSWORD:-secretly_dev_redis_password}@redis:6379
      
      # Security Configuration
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-32-byte-encryption-key-change-this}
      NODE_ENV: ${NODE_ENV:-production}
      
      # Server Configuration
      PORT: 3000
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Feature Flags
      ENABLE_CREDIT_CARD_DETECTION: ${ENABLE_CREDIT_CARD_DETECTION:-true}
      ENABLE_SSN_DETECTION: ${ENABLE_SSN_DETECTION:-true}
      ENABLE_API_KEY_DETECTION: ${ENABLE_API_KEY_DETECTION:-true}
      ENABLE_PASSWORD_DETECTION: ${ENABLE_PASSWORD_DETECTION:-true}
      ENABLE_PII_DETECTION: ${ENABLE_PII_DETECTION:-true}
      
      # Rate Limiting
      RATE_LIMIT_PER_USER: ${RATE_LIMIT_PER_USER:-10}
      RATE_LIMIT_PER_CHANNEL: ${RATE_LIMIT_PER_CHANNEL:-100}
      RATE_LIMIT_GLOBAL: ${RATE_LIMIT_GLOBAL:-1000}
      
      # Data Retention (days)
      OBFUSCATION_RECORD_TTL: ${OBFUSCATION_RECORD_TTL:-30}
      AUDIT_LOG_TTL: ${AUDIT_LOG_TTL:-90}
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
    networks:
      - secretly-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: PostgreSQL Admin UI
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: secretly-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@secretly.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-secretly_dev_admin_password}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - secretly-network
    profiles:
      - dev

  # Optional: Redis Commander UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: secretly-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: redis:redis:6379:0:${REDIS_PASSWORD:-secretly_dev_redis_password}
    ports:
      - "8081:8081"
    networks:
      - secretly-network
    profiles:
      - dev

networks:
  secretly-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgadmin_data: